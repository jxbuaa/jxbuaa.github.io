<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>X小Mickey&#39;Blog</title>
  
  <subtitle>Stay Foolish &amp;&amp; Stay Hungry</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://jxbuaa.github.io/"/>
  <updated>2020-07-14T02:58:04.744Z</updated>
  <id>http://jxbuaa.github.io/</id>
  
  <author>
    <name>X小Mickey</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>海思Hi3519 uboot start.s分析</title>
    <link href="http://jxbuaa.github.io/2020/07/%E6%B5%B7%E6%80%9DHi3519%20uboot%20start.s%E5%88%86%E6%9E%90/"/>
    <id>http://jxbuaa.github.io/2020/07/海思Hi3519 uboot start.s分析/</id>
    <published>2020-07-14T02:05:35.000Z</published>
    <updated>2020-07-14T02:58:04.744Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>简单梳理海思Hi3519 uboot start.s一阶段和二阶段的流程图</p><span id="more"></span><p><img src="https://wx1.sinaimg.cn/mw690/6a6ccd8fly1ggqb8e61o9j20jo1333yz.jpg" alt="图1"><p align="center">start.s流程分析</p></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;简单梳理海思Hi3519 uboot start.s一阶段和二阶段的流程图&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://jxbuaa.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Linux" scheme="http://jxbuaa.github.io/tags/Linux/"/>
    
      <category term="Driver" scheme="http://jxbuaa.github.io/tags/Driver/"/>
    
  </entry>
  
  <entry>
    <title>Python保存.mht格式网页</title>
    <link href="http://jxbuaa.github.io/2019/01/Python%E4%BF%9D%E5%AD%98.mht%E6%A0%BC%E5%BC%8F%E7%BD%91%E9%A1%B5/"/>
    <id>http://jxbuaa.github.io/2019/01/Python保存.mht格式网页/</id>
    <published>2019-01-29T14:59:47.000Z</published>
    <updated>2019-01-29T15:26:04.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>自动化完成目标网页的保存，文件名为标题名，网页可离线打开，并保证不缺损信息。</p><span id="more"></span><h1 id="实现方案"><a href="#实现方案" class="headerlink" title="实现方案"></a>实现方案</h1><p>使用善于爬网页的python实现<br>方式1：urllib保存html<br>urllib是一个包含request、error、parse、robotparser四个模块，关乎网络资源请求的包<br>调用urllib完成版本1</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getHtml</span>(<span class="params">url</span>):</span></span><br><span class="line">headers = &#123;<span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36&quot;</span>&#125;</span><br><span class="line">request = urllib.request.Request(url, headers=headers)</span><br><span class="line">response = urllib.request.urlopen(request).read()</span><br><span class="line"><span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">saveHtml</span>(<span class="params">file_name, file_content</span>):</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(file_name.replace(<span class="string">&#x27;/&#x27;</span>, <span class="string">&#x27;_&#x27;</span>) + <span class="string">&quot;.html&quot;</span>, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">f.write(file_content)</span><br><span class="line"></span><br><span class="line">base_url = <span class="string">&#x27;http://www.weain.mil.cn/cggg/zbgg/&#x27;</span></span><br><span class="line">base_path = <span class="string">&#x27;E:\\jkl\\&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> p <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">615675</span>, <span class="number">615682</span>):</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">result = getHtml(base_url + <span class="built_in">str</span>(p) + <span class="string">&#x27;.html&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(base_url + <span class="built_in">str</span>(p) + <span class="string">&#x27;.html&#x27;</span>)</span><br><span class="line">path = base_path + <span class="built_in">str</span>(p)</span><br><span class="line"><span class="comment">#print(path)</span></span><br><span class="line">saveHtml(path, result)</span><br><span class="line">p = p+<span class="number">1</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;done&quot;</span>)</span><br></pre></td></tr></table></figure><p>问题<br>1.1 反爬<br>该网站虽然简单，web服务应该还是添加了基本的反爬措施<br>解决：需要在request时添加浏览器headers，将程序行为掩饰为浏览器行为</p><p>1.2 html信息不全<br>抓下来html文件信息不全，图片损失，网页框架混乱<br>该方式只适合快速抓取关键字的场景</p><p>方式2：Chilkat保存MHTML(mht)<br>MHTML = MIME Encapsulation of Aggregate HTML Documents<br>将一个多附件网页(图片、flash、Java小程序)存储为单一文档，可用于发送html电子邮件</p><p>Chilkat是一个功能强大的有直接提供保存mht格式文件接口的包<br>调用Chilkat完成版本2</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># !/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*-coding:utf-8-*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> chilkat</span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_title</span>(<span class="params">url</span>):</span></span><br><span class="line">    headers = &#123;<span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36&quot;</span>&#125;</span><br><span class="line">    request = urllib.request.Request(url, headers=headers)</span><br><span class="line">    html = urllib.request.urlopen(request).read()</span><br><span class="line">    soup = BeautifulSoup(html, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(soup.find(<span class="string">&#x27;h1&#x27;</span>).get_text())</span><br><span class="line">    <span class="keyword">return</span> soup.find(<span class="string">&#x27;h1&#x27;</span>).get_text()</span><br><span class="line"></span><br><span class="line">mht = chilkat.CkMht()</span><br><span class="line"></span><br><span class="line">success = mht.UnlockComponent(<span class="string">&quot;Anything for 30-day trial&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> (success != <span class="literal">True</span>):</span><br><span class="line">    <span class="built_in">print</span>(mht.lastErrorText())</span><br><span class="line">    sys.exit()</span><br><span class="line"></span><br><span class="line">base_url = <span class="string">&quot;http://www.weain.mil.cn/cggg/zbgg/&quot;</span></span><br><span class="line">base_path = <span class="string">&quot;C:\\Users\\x.x-pc\\Desktop\\html_grep\\save\\&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    print(&quot;Please Input Web Page Index: &quot;)</span></span><br><span class="line"><span class="string">    start = input(&quot;please input web page index: &quot;)</span></span><br><span class="line"><span class="string">    print(&quot;start &gt;&gt; &quot; + start)</span></span><br><span class="line"><span class="string">    print(&quot;end   &gt;&gt; &quot; + end)</span></span><br><span class="line"><span class="string">    print(start + &quot;  &quot; + end);</span></span><br><span class="line"><span class="string">    sys.exit()</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">615675</span>, <span class="number">615676</span>):</span><br><span class="line">    <span class="comment">#   try:</span></span><br><span class="line">            target_url = base_url + <span class="built_in">str</span>(p) + <span class="string">&#x27;.html&#x27;</span></span><br><span class="line">            save_path = base_path + get_title(target_url) + <span class="string">&#x27;.mht&#x27;</span></span><br><span class="line">            <span class="built_in">print</span>(target_url)</span><br><span class="line">            <span class="built_in">print</span>(save_path)</span><br><span class="line"></span><br><span class="line">            success = mht.GetAndSaveMHT(target_url, save_path)</span><br><span class="line">            <span class="keyword">if</span> (success != <span class="literal">True</span>):</span><br><span class="line">                <span class="built_in">print</span>(mht.lastErrorText())</span><br><span class="line">                sys.exit()</span><br><span class="line"></span><br><span class="line">            p = p + <span class="number">1</span></span><br><span class="line">    <span class="comment">#    except:</span></span><br><span class="line">    <span class="comment">#        print(&quot;Exception&quot;);</span></span><br><span class="line">    <span class="comment">#        continue</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;done&quot;</span>)</span><br></pre></td></tr></table></figure><p>问题：<br>2.1 该方式可以较好的解决问题1.2，但是依然有部分图片信息缺损<br>与chrome浏览器直接右键保存为mht格式文件信息差距较大</p><p>2.2 该网页采用的是动态加载的方式，发布的采购公告信息使用Javascript加载<br>Chilkat只能抓取到当前页面，无法抓到动态页面<br>接下来就是想办法抓到动态页面，然后拼接到静态页面<br>emmm ……</p><p>方式3：Selenium<br>Selenium是一个用于Web应用程序测试工具<br>Selenium测试直接运行在浏览器中，就像真正的用户在操作一样<br>支持的浏览器包括IE（7, 8, 9, 10, 11），Mozilla Firefox，Safari，Google Chrome，Opera等。<br>同时python支持对应的selenium包<br>selenium直接与chromedriver进行交互，调用chromedriver原生api实现浏览器的操作<br>可以利用浏览器保存完整的mht文件</p><p>问题：<br>保存网页时默认获取的是html的title字段，导致每个网页该字段都一样<br>真正的标题则在h1字段，需要修改windows保存窗口的命名栏<br>而操作windows窗口则超过了selenium的能力范畴</p><p>为了解决该问题，先后搜查了如下方式：<br>AutoHotKey、AutoIt<br>其中AutoHotKey是一款免费的、Windows平台下开放源代码的热键脚本语言<br>可以通过脚本调用键鼠、系统接口及程序，并创建基于简单语言的图形化界面的执行程序</p><p>该工具非常强大，可以自动化完成高重复性操作，可适用于自动化测试、生产中</p><p>AutoHotKey可将该语言脚本例化成exe，供python调用<br>AutoIt则有对应的pyautoit包，最终实现也是调用AutoItX3.dll</p><p>pyautogui包可以操作键鼠，不需要调用其他动态库，且使用相对简单，为该问题最后选取的方案<br>为了提高人机交互，使用tkinter实现了简单的对话框界面。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> tkinter.messagebox</span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tkinter.filedialog <span class="keyword">import</span> askdirectory</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pyautogui</span><br><span class="line"><span class="keyword">import</span> pyperclip</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.service <span class="keyword">import</span> Service</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init_driver</span>(<span class="params">path, quiet=<span class="literal">True</span></span>):</span></span><br><span class="line">    service = Service(executable_path=path)</span><br><span class="line">    <span class="comment"># service.command_line_args()</span></span><br><span class="line">    service.start()</span><br><span class="line"></span><br><span class="line">    custom_options = webdriver.ChromeOptions()</span><br><span class="line">    custom_options.add_argument(<span class="string">&quot;--save-page-as-mhtml&quot;</span>)</span><br><span class="line">    custom_options.add_argument(<span class="string">&quot;--start-maximized&quot;</span>)</span><br><span class="line">    custom_options.add_argument(<span class="string">&#x27;--disable-infobars&#x27;</span>)</span><br><span class="line">    custom_options.add_argument(<span class="string">&#x27;--ignore-certificate-errors&#x27;</span>)</span><br><span class="line">    custom_options.add_argument(<span class="string">&#x27;--ignore-ssl-errors&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> quiet:</span><br><span class="line">        <span class="comment"># 静默</span></span><br><span class="line">        custom_options.add_argument(<span class="string">&#x27;--headless&#x27;</span>)</span><br><span class="line">        custom_options.add_argument(<span class="string">&#x27;--disable-gpu&#x27;</span>)</span><br><span class="line">        custom_options.add_argument(<span class="string">&quot;--hide-scrollbars&quot;</span>)</span><br><span class="line"></span><br><span class="line">    driver = webdriver.Chrome(executable_path=path, options=custom_options)</span><br><span class="line">    <span class="keyword">return</span> service, driver</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exit_driver</span>(<span class="params">service, driver</span>):</span></span><br><span class="line">    driver.quit()</span><br><span class="line">    service.stop()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_page_as</span>(<span class="params">name</span>):</span></span><br><span class="line">    <span class="comment"># 保存</span></span><br><span class="line">    pyautogui.hotkey(<span class="string">&#x27;ctrl&#x27;</span>, <span class="string">&#x27;s&#x27;</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="comment"># pyautogui不支持中文</span></span><br><span class="line">    pyperclip.copy(name)</span><br><span class="line">    pyautogui.hotkey(<span class="string">&#x27;ctrl&#x27;</span>, <span class="string">&#x27;v&#x27;</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    pyautogui.hotkey(<span class="string">&#x27;enter&#x27;</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 暂不支持文件已存在（覆盖保存）</span></span><br><span class="line">    <span class="comment"># pyautogui.hotkey(&#x27;y&#x27;)</span></span><br><span class="line">    <span class="comment"># time.sleep(3)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_mht</span>(<span class="params">driver_path, tgt_url_list, file_path_list</span>):</span></span><br><span class="line">    service, driver = init_driver(driver_path, quiet=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># end_cnt = 1</span></span><br><span class="line">    opened_chrome_tab_cnt = <span class="number">0</span></span><br><span class="line">    allowed_chrome_tab_cnt = <span class="number">5</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        <span class="comment"># print(&quot;len(tgt_url_list)&quot; + str(i) + &quot; = &quot; + str(len(tgt_url_list[i])))</span></span><br><span class="line">        <span class="built_in">print</span>(file_path_list[i])</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(tgt_url_list[i]) != <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">for</span> url <span class="keyword">in</span> tgt_url_list[i]:</span><br><span class="line">                driver.get(url)</span><br><span class="line">                opened_chrome_tab_cnt += <span class="number">1</span></span><br><span class="line">                title = driver.find_element_by_tag_name(<span class="string">&#x27;h1&#x27;</span>)</span><br><span class="line">                <span class="built_in">print</span>(title.text)</span><br><span class="line">                save_page_as(file_path_list[i] + <span class="string">&quot;\\&quot;</span> + title.text)</span><br><span class="line">                <span class="comment"># # 避免结束多开1个新标签页</span></span><br><span class="line">                <span class="comment"># if end_cnt == len(tgt_url_list[i]):</span></span><br><span class="line">                <span class="comment">#     break</span></span><br><span class="line">                <span class="comment"># else:</span></span><br><span class="line">                <span class="comment">#     end_cnt += 1</span></span><br><span class="line">                <span class="comment"># 打开新标签页</span></span><br><span class="line">                pyautogui.hotkey(<span class="string">&#x27;ctrl&#x27;</span>, <span class="string">&#x27;t&#x27;</span>)</span><br><span class="line">                driver.switch_to.window(driver.window_handles[-<span class="number">1</span>])</span><br><span class="line">                <span class="comment"># 暂时规避chrome无法修改搜索引擎导致新标签页阻塞连接的问题</span></span><br><span class="line">                pyperclip.copy(url)</span><br><span class="line">                pyautogui.hotkey(<span class="string">&#x27;ctrl&#x27;</span>, <span class="string">&#x27;v&#x27;</span>)</span><br><span class="line">                pyautogui.hotkey(<span class="string">&#x27;enter&#x27;</span>)</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 处理已开标签避免chrome标签过多将内存耗尽</span></span><br><span class="line">                <span class="keyword">if</span> opened_chrome_tab_cnt == allowed_chrome_tab_cnt:</span><br><span class="line">                    handle = driver.current_window_handle</span><br><span class="line">                    <span class="keyword">while</span> opened_chrome_tab_cnt != <span class="number">0</span>:</span><br><span class="line">                        driver.switch_to.window(driver.window_handles[<span class="number">0</span>])</span><br><span class="line">                        driver.close()</span><br><span class="line">                        opened_chrome_tab_cnt -= <span class="number">1</span></span><br><span class="line">                        time.sleep(<span class="number">2</span>)</span><br><span class="line">                    driver.switch_to.window(handle)</span><br><span class="line"></span><br><span class="line">    time.sleep(<span class="number">6</span>)</span><br><span class="line">    exit_driver(service, driver)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_tgt_url</span>(<span class="params">driver_path, start_index_list, start_item_list, item_total_cnt_list</span>):</span></span><br><span class="line">    service, driver = init_driver(driver_path)</span><br><span class="line">    item_per_page_cnt = <span class="number">8</span></span><br><span class="line">    index_page_cnt_list = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">    tgt_url_list = [[] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)]</span><br><span class="line">    home_page_url = <span class="string">&quot;http://www.weain.mil.cn&quot;</span></span><br><span class="line">    index_page_id_list = [<span class="string">&quot;/cggg/zbgg/&quot;</span>, <span class="string">&quot;/cggg/zbgg1/&quot;</span>, <span class="string">&quot;/cggg/gzgg/&quot;</span>, <span class="string">&quot;/cggg/qtgg/&quot;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        <span class="keyword">if</span> item_total_cnt_list[i] != <span class="string">&quot;&quot;</span>:</span><br><span class="line">            <span class="comment"># 向上取整</span></span><br><span class="line">            index_page_cnt_list[i] = math.ceil((<span class="built_in">int</span>(start_item_list[i]) + <span class="built_in">int</span>(item_total_cnt_list[i]) - <span class="number">1</span>) / item_per_page_cnt)</span><br><span class="line">            <span class="comment"># print(index_page_cnt_list[i])</span></span><br><span class="line"></span><br><span class="line">            href_cnt = <span class="number">1</span></span><br><span class="line">            <span class="keyword">for</span> page_index <span class="keyword">in</span> <span class="built_in">range</span>(index_page_cnt_list[i]):</span><br><span class="line">                <span class="comment"># 获取索引页地址</span></span><br><span class="line">                <span class="keyword">if</span> start_index_list[i] == <span class="string">&quot;1&quot;</span> <span class="keyword">and</span> page_index == <span class="number">0</span>:</span><br><span class="line">                    index_page_url = home_page_url + index_page_id_list[i] + <span class="string">&quot;index.html&quot;</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    index_page_url = home_page_url + index_page_id_list[i] + \</span><br><span class="line">                                     <span class="string">&quot;index_&quot;</span> + <span class="built_in">str</span>(<span class="built_in">int</span>(start_index_list[i]) + page_index) + <span class="string">&quot;.html&quot;</span></span><br><span class="line"></span><br><span class="line">                <span class="built_in">print</span>(index_page_url)</span><br><span class="line">                <span class="comment"># 索引页内获取tgt_url</span></span><br><span class="line">                driver.get(index_page_url)</span><br><span class="line">                html = driver.page_source</span><br><span class="line">                soup = BeautifulSoup(html, <span class="string">&quot;html.parser&quot;</span>)</span><br><span class="line">                href_list = soup.find_all(href=re.<span class="built_in">compile</span>(<span class="string">&quot;^&quot;</span> + index_page_id_list[i]), target=<span class="literal">True</span>, title=<span class="literal">True</span>)</span><br><span class="line">                <span class="comment"># print(href_list)</span></span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> href_list:</span><br><span class="line">                    <span class="comment"># print(j)</span></span><br><span class="line">                    <span class="comment"># print(home_page_url + j[&#x27;href&#x27;])</span></span><br><span class="line">                    <span class="keyword">if</span> href_cnt != <span class="built_in">int</span>(start_item_list[i]):</span><br><span class="line">                        href_cnt += <span class="number">1</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        <span class="built_in">print</span>(home_page_url + j[<span class="string">&#x27;href&#x27;</span>])</span><br><span class="line">                        tgt_url_list[i].append(home_page_url + j[<span class="string">&#x27;href&#x27;</span>])</span><br><span class="line">                        <span class="comment"># print(str(len(tgt_url_list[i])) + &quot; -- &quot; + item_total_cnt_list[i])</span></span><br><span class="line">                        <span class="keyword">if</span> <span class="built_in">len</span>(tgt_url_list[i]) == <span class="built_in">int</span>(item_total_cnt_list[i]):</span><br><span class="line">                            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    exit_driver(service, driver)</span><br><span class="line">    <span class="comment"># print(tgt_url_list)</span></span><br><span class="line">    <span class="keyword">return</span> tgt_url_list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">center_window</span>(<span class="params">root, width, height</span>):</span></span><br><span class="line">    screenwidth = root.winfo_screenwidth()</span><br><span class="line">    screenheight = root.winfo_screenheight()</span><br><span class="line">    size = <span class="string">&#x27;%dx%d+%d+%d&#x27;</span> % (width, height, (screenwidth - width) / <span class="number">2</span>, (screenheight - height) / <span class="number">2</span>)</span><br><span class="line">    <span class="comment"># print(size)</span></span><br><span class="line">    root.geometry(size)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main_process</span>(<span class="params">cb_name_list, start_index_list, start_item_list, item_total_cnt_list, file_save_path</span>):</span></span><br><span class="line">    <span class="comment"># 获取当前路径（简化部署默认chromedriver在同一路径）</span></span><br><span class="line">    pwd = os.path.split(os.path.realpath(__file__))[<span class="number">0</span>]</span><br><span class="line">    chrome_driver_path = pwd + <span class="string">&quot;\\chromedriver.exe&quot;</span></span><br><span class="line">    <span class="comment"># print(chrome_driver_path)</span></span><br><span class="line">    <span class="comment"># 检查chromedriver是否存在</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(chrome_driver_path):</span><br><span class="line">        <span class="comment"># raise Exception(&quot;chromedriver必须与exe同一路径!&quot;)</span></span><br><span class="line">        tkinter.messagebox.showerror(<span class="string">&quot;错误&quot;</span>, <span class="string">&quot;chromedriver必须与exe同一路径&quot;</span>)</span><br><span class="line">        exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获得当前系统时间创建文件夹以规避文件覆盖问题</span></span><br><span class="line">    localtime = time.strftime(<span class="string">&#x27;%Y-%m-%d_%H-%M-%S&#x27;</span>, time.localtime(time.time()))</span><br><span class="line">    file_save_path = file_save_path + <span class="string">&quot;\\&quot;</span> + localtime</span><br><span class="line">    <span class="comment"># print(file_save_path)</span></span><br><span class="line">    os.mkdir(file_save_path)</span><br><span class="line"></span><br><span class="line">    file_save_path_list = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        file_save_path_list.append(file_save_path + <span class="string">&quot;\\&quot;</span> + cb_name_list[i])</span><br><span class="line">        <span class="keyword">if</span> item_total_cnt_list[i] != <span class="string">&quot;&quot;</span>:</span><br><span class="line">            os.mkdir(file_save_path_list[i])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 静默获取target_url</span></span><br><span class="line">    target_url_list = get_tgt_url(chrome_driver_path, start_index_list, start_item_list, item_total_cnt_list)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 保存target_url</span></span><br><span class="line">    save_mht(chrome_driver_path, target_url_list, file_save_path_list)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    root = Tk()</span><br><span class="line">    root.title(<span class="string">&quot;保存MHT&quot;</span>)</span><br><span class="line">    root.resizable(width=<span class="literal">False</span>, height=<span class="literal">False</span>)</span><br><span class="line">    center_window(root, <span class="number">550</span>, <span class="number">400</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">select_path</span>():</span></span><br><span class="line">        path_ = askdirectory()</span><br><span class="line">        save_path_text.<span class="built_in">set</span>(path_.replace(<span class="string">&quot;/&quot;</span>, <span class="string">&quot;\\&quot;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">check</span>():</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">            <span class="keyword">if</span> cb_var_list[i].get() == <span class="string">&#x27;0&#x27;</span>:</span><br><span class="line">                entry_item_cnt_list[i].delete(<span class="number">0</span>, END)</span><br><span class="line"></span><br><span class="line">    entry_start_index_list = []</span><br><span class="line">    entry_start_item_list = []</span><br><span class="line">    entry_item_cnt_list = []</span><br><span class="line">    cb_name_list = [<span class="string">&quot;招标公告&quot;</span>, <span class="string">&quot;中标公告&quot;</span>, <span class="string">&quot;更正公告&quot;</span>, <span class="string">&quot;其他公告&quot;</span>]</span><br><span class="line">    cb_var_list = [StringVar() <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)]</span><br><span class="line">    start_index_text_list = [StringVar() <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)]</span><br><span class="line">    start_item_text_list = [StringVar() <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)]</span><br><span class="line">    item_cnt_text_list = [StringVar() <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        frame = Frame(root)</span><br><span class="line">        cb_var_list[i].<span class="built_in">set</span>(<span class="number">0</span>)</span><br><span class="line">        Checkbutton(frame, text=cb_name_list[i], variable=cb_var_list[i], command=check).grid(row=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        Label(frame, text=<span class="string">&quot;起始索引页:&quot;</span>).grid(row=<span class="number">1</span>, column=<span class="number">0</span>)</span><br><span class="line">        start_index_text_list[i].<span class="built_in">set</span>(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">        entry_start_index_list.append(Entry(frame, textvariable=start_index_text_list[i], width=<span class="number">10</span>))</span><br><span class="line">        entry_start_index_list[i].grid(row=<span class="number">1</span>, column=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        Label(frame, text=<span class="string">&quot;起始条目:&quot;</span>).grid(row=<span class="number">1</span>, column=<span class="number">2</span>, padx=<span class="number">20</span>)</span><br><span class="line">        start_item_text_list[i].<span class="built_in">set</span>(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">        entry_start_item_list.append(Entry(frame, textvariable=start_item_text_list[i], width=<span class="number">10</span>))</span><br><span class="line">        entry_start_item_list[i].grid(row=<span class="number">1</span>, column=<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">        Label(frame, text=<span class="string">&quot;保存条目数:&quot;</span>).grid(row=<span class="number">1</span>, column=<span class="number">4</span>, padx=<span class="number">20</span>)</span><br><span class="line">        entry_item_cnt_list.append(Entry(frame, textvariable=item_cnt_text_list[i], width=<span class="number">10</span>))</span><br><span class="line">        entry_item_cnt_list[i].grid(row=<span class="number">1</span>, column=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">        frame.place(x=<span class="number">0</span>, y=i*<span class="number">70</span>)</span><br><span class="line"></span><br><span class="line">    save_path_text = StringVar()</span><br><span class="line"></span><br><span class="line">    frame = Frame(root)</span><br><span class="line">    Label(frame, text=<span class="string">&quot; 保存路径:    &quot;</span>).grid(row=<span class="number">0</span>)</span><br><span class="line">    Entry(frame, textvariable=save_path_text, width=<span class="number">60</span>).grid(row=<span class="number">0</span>, column=<span class="number">1</span>)</span><br><span class="line">    Button(frame, text=<span class="string">&quot;...&quot;</span>, width=<span class="number">1</span>, command=select_path).grid(row=<span class="number">0</span>, column=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_content</span>():</span></span><br><span class="line">        start_index_list = []</span><br><span class="line">        start_item_list = []</span><br><span class="line">        item_total_cnt_list = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">            start_index_list.append(start_index_text_list[i].get())</span><br><span class="line">            start_item_list.append(start_item_text_list[i].get())</span><br><span class="line">            item_total_cnt_list.append(item_cnt_text_list[i].get())</span><br><span class="line"></span><br><span class="line">        <span class="comment">#检查entry</span></span><br><span class="line">        warning_flag = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">int</span>(start_item_list[i]) &gt; <span class="number">8</span>:</span><br><span class="line">                warning_flag = <span class="literal">True</span></span><br><span class="line">                tkinter.messagebox.showwarning(<span class="string">&quot;警告&quot;</span>, <span class="string">&quot;起始条目不能超过8&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">            <span class="keyword">if</span> cb_var_list[i].get() == <span class="string">&#x27;1&#x27;</span> <span class="keyword">and</span> item_total_cnt_list[i] == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">                warning_flag = <span class="literal">True</span></span><br><span class="line">                tkinter.messagebox.showwarning(<span class="string">&quot;警告&quot;</span>, <span class="string">&quot;请填入 [&quot;</span> + cb_name_list[i] + <span class="string">&quot;] 保存条目数&quot;</span>)</span><br><span class="line">            <span class="keyword">if</span> cb_var_list[i].get() == <span class="string">&#x27;0&#x27;</span> <span class="keyword">and</span> item_total_cnt_list[i] != <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">                warning_flag = <span class="literal">True</span></span><br><span class="line">                tkinter.messagebox.showwarning(<span class="string">&quot;警告&quot;</span>, <span class="string">&quot;请勾选 [&quot;</span> + cb_name_list[i] + <span class="string">&quot;] &quot;</span>)</span><br><span class="line"></span><br><span class="line">        check_nothing_cnt = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">            <span class="keyword">if</span> cb_var_list[i].get() == <span class="string">&#x27;0&#x27;</span> <span class="keyword">and</span> item_total_cnt_list[i] == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">                check_nothing_cnt += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> check_nothing_cnt == <span class="number">4</span>:</span><br><span class="line">            warning_flag = <span class="literal">True</span></span><br><span class="line">            tkinter.messagebox.showwarning(<span class="string">&quot;警告&quot;</span>, <span class="string">&quot;请填入‘保存条目数’&quot;</span>)</span><br><span class="line"></span><br><span class="line">        file_save_path = save_path_text.get()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> file_save_path:</span><br><span class="line">            warning_flag = <span class="literal">True</span></span><br><span class="line">            tkinter.messagebox.showwarning(<span class="string">&quot;警告&quot;</span>, <span class="string">&quot;请选择‘保存路径’&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> warning_flag:</span><br><span class="line">            <span class="comment"># print(item_total_cnt)</span></span><br><span class="line">            <span class="comment"># print(file_save_path)</span></span><br><span class="line">            <span class="comment"># 隐藏主窗口及后续message主窗口</span></span><br><span class="line">            root.withdraw()</span><br><span class="line">            main_process(cb_name_list, start_index_list, start_item_list, item_total_cnt_list, file_save_path)</span><br><span class="line">            tkinter.messagebox.showinfo(<span class="string">&quot;保存MHT&quot;</span>, <span class="string">&quot;完成&quot;</span>)</span><br><span class="line">            root.destroy()</span><br><span class="line">            exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    Button(frame, text=<span class="string">&quot;确定&quot;</span>, width=<span class="number">8</span>, command=get_content).grid(row=<span class="number">1</span>, column=<span class="number">1</span>, pady=<span class="number">20</span>)</span><br><span class="line">    frame.place(x=<span class="number">0</span>, y=<span class="number">300</span>)</span><br><span class="line"></span><br><span class="line">    root.mainloop()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;自动化完成目标网页的保存，文件名为标题名，网页可离线打开，并保证不缺损信息。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://jxbuaa.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Python" scheme="http://jxbuaa.github.io/tags/Python/"/>
    
      <category term="Selenium" scheme="http://jxbuaa.github.io/tags/Selenium/"/>
    
      <category term="爬虫" scheme="http://jxbuaa.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>Android 5.1设备驱动调试记录</title>
    <link href="http://jxbuaa.github.io/2019/01/Android%205.1%E8%AE%BE%E5%A4%87%E9%A9%B1%E5%8A%A8%E8%B0%83%E8%AF%95%E8%AE%B0%E5%BD%95/"/>
    <id>http://jxbuaa.github.io/2019/01/Android 5.1设备驱动调试记录/</id>
    <published>2019-01-28T14:09:21.000Z</published>
    <updated>2019-01-28T14:56:04.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>简要记录了Android5.1设备驱动的调试记录，以led为例，记录了HAL、Framework层的处理，并对调用关系进行了简要分析。</p><span id="more"></span><h1 id="HAL-Layer"><a href="#HAL-Layer" class="headerlink" title="HAL Layer"></a>HAL Layer</h1><p>1.g6818_lollipop_v51\hardware\libhardware\include\hardware</p><blockquote><p>创建led.h头文件</p></blockquote><p>2.Z:\arm6818\E17160\g6818_lollipop_v51\hardware\libhardware\modules</p><blockquote><p>创建led文件夹<br>led.c<br>Android.mk</p></blockquote><p>3.编译</p><blockquote><p>source build/envsetup.sh<br>lunch 选择 21. g6818-userdebug<br>mmm hardware/libhardware/modules/led/<br>ll out/target/product/g6818/system/lib/hw/</p></blockquote><h1 id="Frameworks-Layer"><a href="#Frameworks-Layer" class="headerlink" title="Frameworks Layer"></a>Frameworks Layer</h1><p>1.创建JNI接口<br>　　1.1 创建frameworks/base/services/core/jni/com_android_server_LedService.cpp<br>　　1.2 修改frameworks/base/services/core/jni/onload.cpp添加注册native接口<br>　　1.3 修改frameworks/base/services/core/jni/Android.mk<br>　　添加”com_android_server_LedService.cpp”项</p><blockquote><p>注意：<br>LedService.java的java接口的入参、返回值类型一定要与com_android_server_LedService.cpp的native函数一致<br>否则，main.txt日志会报注册JNI接口失败”Failed to register native method”<br>导致zygote初始化失败，反复init</p></blockquote><p>2.创建frameworks/base/services/core/java/com/android/server/LedService.java 实现服务类<br>修改frameworks/base/services/java/com/android/server/SystemServer.java<br>注册Led服务到Service Manager中</p><p>3.生成ILedService.java服务接口类<br>　　3.1 创建frameworks/base/core/java/android/os/ILedService.aidl<br>　　3.2 修改frameworks/base/Android.mk<br>　　　　添加编译项”core/java/android/os/ILedService.aidl”<br>　　3.3 编译<br>    　　mmm frameworks/base/</p><p>4.编译mmm frameworks/base/services/<br>ll out/target/product/g6818/system/lib/libandroid_servers.so</p><h1 id="框架分析"><a href="#框架分析" class="headerlink" title="框架分析"></a>框架分析</h1><p>调用关系（自顶向下）：</p><blockquote><p>1.应用Activity<br>private ILedService iLedService = ILedService.Stub.asInterface(ServiceManager.getService(“led”))<br>Client进程通过ServiceManager(Binder，Stub)向Server进程请求已注册的Led服务<br>2.iLedService.LedOpen()调用JNI接口，JNI转C++接口<br>3.C++接口通过int hw_get_module(const char *id, const struct hw_module_t **module)<br>加载HAL动态库led.default.so<br>dlsym()获取动态库led.default.so中HAL_MODULE_INFO_SYM符号表的入口地址<br>即struct led_module_t的地址<br>4.通过句柄直接调用驱动api接口-&gt;内核驱动</p></blockquote><p>具体实现（自底向上）：  </p><blockquote><p>1.HAL层实现Led.c，直接和内核交互<br>2.为对接Framework和HAL层，通过JNI机制，创建com_android_server_LedService.cpp实现JNI native接口<br>3.创建LedService.java 实现服务类，修改SystemServer.java 注册Led服务到Service Manager中<br>　该类中声明了native_LedOpen()，native_LedOn()，native_LedOff()向下对接JNI native接口<br>4.创建ILedService.aidl（Android Interface Definition Language）文件，编译生成ILedService.java接口类<br>　APP进程依靠Binder机制，通过已注册的服务名称，获取该接口类</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;简要记录了Android5.1设备驱动的调试记录，以led为例，记录了HAL、Framework层的处理，并对调用关系进行了简要分析。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://jxbuaa.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Driver" scheme="http://jxbuaa.github.io/tags/Driver/"/>
    
      <category term="Android" scheme="http://jxbuaa.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>READONLY文件系统配置</title>
    <link href="http://jxbuaa.github.io/2019/01/READONLY%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/"/>
    <id>http://jxbuaa.github.io/2019/01/READONLY文件系统配置/</id>
    <published>2019-01-28T14:04:40.000Z</published>
    <updated>2019-01-29T15:25:52.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>系统是运行在内存中的，硬盘只是系统运行中的存储媒介。当硬盘对应到内存的数据发生改变时，就需要系统将内存的数据同步更新到硬盘进行存储。<br>异常掉电之所以具备破坏力，是因为异常掉电会不可预知的中断系统将内存数据回写到硬盘的过程，直接导致文件系统数据紊乱。绝大多数带有日志的文件系统（ext3，ext4，xfs等），大多数情况可以依靠文件系统日志自恢复或者依靠fsck命令恢复，问题是并不是所有损坏都可以被修复。<br>因此，将整个系统设置为只读模式，防止整个回写过程的发生就成了整个方案的出发点。</p><span id="more"></span><h1 id="Case1-方案实施"><a href="#Case1-方案实施" class="headerlink" title="Case1-方案实施"></a>Case1-方案实施</h1><blockquote><p>系统环境<br>Linux发行版操作系统Red Hat Enterprise Linux 6.4 64位</p></blockquote><p>在Red Hat Enterprise Linux 6.4系统中已经集成了READONLY的配置能力。整个配置过程主要涉及到3个系统配置文件。</p><blockquote><p>/etc/sysconfig/readonly-root  </p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Set to <span class="string">&#x27;yes&#x27;</span> to mount the system filesystems read-only.</span></span><br><span class="line">READONLY=yes</span><br><span class="line"><span class="meta">#</span><span class="bash"> Set to <span class="string">&#x27;yes&#x27;</span> to mount various temporary state as either tmpfs</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> or on the block device labelled RW_LABEL. Implied by READONLY</span></span><br><span class="line">TEMPORARY_STATE=yes</span><br><span class="line"><span class="meta">#</span><span class="bash"> Place to put a tmpfs <span class="keyword">for</span> temporary scratch writable space</span></span><br><span class="line">RW_MOUNT=/var/lib/stateless/writable</span><br><span class="line"><span class="meta">#</span><span class="bash"> Label on <span class="built_in">local</span> filesystem <span class="built_in">which</span> can be used <span class="keyword">for</span> temporary scratch space</span></span><br><span class="line">RW_LABEL=stateless-rw</span><br><span class="line"><span class="meta">#</span><span class="bash"> Options to use <span class="keyword">for</span> temporary mount</span></span><br><span class="line">RW_OPTIONS=</span><br><span class="line"><span class="meta">#</span><span class="bash"> Label <span class="keyword">for</span> partition with persistent data</span></span><br><span class="line">STATE_LABEL=stateless-state</span><br><span class="line"><span class="meta">#</span><span class="bash"> Where to mount to the persistent data</span></span><br><span class="line">STATE_MOUNT=/var/lib/stateless/state</span><br><span class="line"><span class="meta">#</span><span class="bash"> Options to use <span class="keyword">for</span> peristent mount</span></span><br><span class="line">STATE_OPTIONS=</span><br></pre></td></tr></table></figure><p>a) READONLY=yes表示将文件系统挂载为只读模式;<br>b) TEMPORARY_STATE=yes表示将系统启动过程中存放临时的状态的路径挂载为tmpfs(内存文件系统，掉电丢失)，或者挂载到被标记为RW_LABEL的块设备。<br>系统在启动过程需要实时更新一部分系统文件，例如/var/log/messages（记录系统启动日志的文件），这个关键字的作用是保证这部分文件的属性为可读写；<br>c) RW_MOUNT是可读写文件的挂载路径，即/var/lib/stateless/writable下文件具备可读写属性；<br>d) RW_LABEL是可读写的标识；<br>e) 对应的有不需要发生变化的“persistent data”，可以用STATE的关键字表示，这里方案并没有到，不做说明。</p><blockquote><p>/etc/rwtab</p></blockquote><p>这个配置文件记录了，当系统被设置为只读时，被排除在外依然可读写的路径和文件。<br>部分摘录如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dirs/var/log</span><br><span class="line">empty/tmp</span><br><span class="line">files/etc/adjtime</span><br></pre></td></tr></table></figure><p>当在图形界面登陆系统时，在登陆账户下的.ICEauthority会被系统刷新，如果此时账户为只读，则会弹出如下警告，以root账户为例。<br><img src="http://wx3.sinaimg.cn/mw690/6a6ccd8fly1fznu7qeo5ej20cw03t0sz.jpg" alt="图1"><br>为了解决这个问题，需要将/root设置为可读写属性。因此在/etc/rwtab添加如下字段：</p><blockquote><p>files    /root</p></blockquote><p>表示将/root账户下的文件设置为可读写。同理，如果有其他账户，则需要一并设置。</p><blockquote><p>/etc/rc.sysinit</p></blockquote><p>实际上这个文件是rc.d/rc.sysinit的软连接。这个文件是系统启动流程，早期阶段的一个关键脚本，将会依据上述配置文件，对文件系统的挂载进行处理。脚本内容比较多，只摘录了跟配置方案相关的这段：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">if [ -f /etc/sysconfig/readonly-root ]; then</span><br><span class="line">. /etc/sysconfig/readonly-root</span><br><span class="line">Fi</span><br><span class="line"></span><br><span class="line">if [ &quot;$READONLY&quot; = &quot;yes&quot; -o &quot;$TEMPORARY_STATE&quot; = &quot;yes&quot; ]; then</span><br><span class="line">for file in /etc/rwtab /etc/rwtab.d/* /dev/.initramfs/rwtab ; do</span><br><span class="line">is_ignored_file &quot;$file&quot; &amp;&amp; continue</span><br><span class="line">[ -f $file ] &amp;&amp; cat $file | while read type path ; do</span><br><span class="line">case &quot;$type&quot; in</span><br><span class="line">empty)</span><br><span class="line">mount_empty $path</span><br><span class="line">;;</span><br><span class="line">files)</span><br><span class="line">mount_files $path</span><br><span class="line">;;</span><br><span class="line">dirs)</span><br><span class="line">mount_dirs $path</span><br><span class="line">;;</span><br><span class="line">*)</span><br><span class="line">;;</span><br><span class="line">esac</span><br><span class="line">[ -n &quot;$SELINUX_STATE&quot; -a -e &quot;$path&quot; ] &amp;&amp; restorecon -R &quot;$path&quot;</span><br><span class="line">done</span><br><span class="line">done</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>这段脚本作用是判断/etc/sysconfig/readonly-root文件会否存在，存在则将其中关键字加到环境变量，然后解析/etc/rwtab文件，从中匹配<code>$type</code>关键字并执行对应case脚本函数。<br>mount_empty作用是将<code>$path</code>路径拷贝到<code>$RW_MOUNT</code>路径（/etc/sysconfig/readonly-root中的关键字），这里只拷贝路径，empty顾名思义就是不包含路径下的子路径和文件。<br>mount_files作用是将<code>$path</code>路径下的文件拷贝到<code>$RW_MOUNT</code>路径，包含文件夹；<br>mount_dirs作用是将<code>$path</code>路径下的文件夹依照原样的路径结构拷贝到<code>$RW_MOUNT</code>路径；<br>拷贝完成后，执行</p><blockquote><p>mount -n –bind “$RW_MOUNT$1” “$1”</p></blockquote><p>这段就是整个方案的核心思路：将需要读写属性的文件及文件夹原样拷贝到具有读写权限的/var/lib/stateless/writable路径下，随后执行mount –bind将对应路径挂回原路径，实现这部分文件可读写而不影响其他文件。<br>配置好后就会出现如下图的效果，/root路径的文件系统类型是tmpfs可读写，而系统其他路径则是readonly。<br><img src="http://wx2.sinaimg.cn/mw690/6a6ccd8fly1fznurt3mb5j20c601xjrd.jpg" alt="图2"><br>当需要对根文件系统读写修改时，执行</p><blockquote><p>mount -o remount rw /</p></blockquote><p>可临时的将文件系统重新赋予读写属性。<br>需要将系统永久恢复时，此时修改/etc/sysconfig/readonly-root配置文件，将READONLY和TEMPORARY_STATE的键值YES修改为NO即可。</p><hr><h1 id="Case2-方案实施"><a href="#Case2-方案实施" class="headerlink" title="Case2-方案实施"></a>Case2-方案实施</h1><blockquote><p>Linux发行版操作系统Red Hat Enterprise Linux 7.1 64位</p></blockquote><p>本想使用上述步骤配置完成需求，但发现RHEL7.1已经开始使用systemd做系统启动和服务管理，已经不存在/etc/rc.sysinit脚本，也就无法按照第一集的步骤将系统配置成只读属性。<br>幸运的是，在systemd的既定框架内，rhel采用rhel-readonly.service服务将原先低版本系统的/etc/rc.sysinit脚本取而代之。如下图所示，该服务已经默认启动。<br><img src="http://wx3.sinaimg.cn/mw690/6a6ccd8fly1fznv0tavupj20l102sglp.jpg" alt="图3"><br>查看/usr/lib/systemd/system/rhel-readonly.service服务脚本，分析后发现与/etc/rc.sysinit脚本大同小异，也就存在将文件系统配置成只读模式的可行性。</p><blockquote><p>/etc/sysconfig/readonly-root<br>READONLY=yes<br>TEMPORARY_STATE=yes</p></blockquote><p>READONLY和TEMPORARY_STATE设置成yes，使能只读模式。<br>其他键值按需求配置，这里默认即可。</p><p>将/root设置为可读写属性,因此在/etc/rwtab添加如下字段：</p><blockquote><p>files    /root</p></blockquote><p>表示将/root账户下的文件设置为可读写。<br>同理，如果有其他账户，则需要一并设置。以保证在登陆账户时，该账户下的.ICEauthority能顺利被系统刷新。</p><blockquote><p>/etc/fstab</p></blockquote><p>这一步是与Case1中最大的区别。需要手动将/分区设置成“ro”挂载属性，如下图所示：<br><img src="http://wx2.sinaimg.cn/mw690/6a6ccd8fly1fznv0ws917j20nv06bmxf.jpg" alt="图4"><br>分析原因，推测可能是systemd并不是完全依赖rhel-readonly.service进行readonly的设置，需要/etc/fstab的配合。<br>执行上述三步后重启，即可完成只读模式的配置。</p><p>PS: 上图/etc/fstab中/cr分区是应用程序的部署分区。如上图所示，添加对应条目，即可按照需求配置成rw属性，其他分区配置同理。</p><hr><h1 id="Case2-问题"><a href="#Case2-问题" class="headerlink" title="Case2-问题"></a>Case2-问题</h1><blockquote><p>操作系统只读需求，安装好系统，使用一段时间后，发现系统内存耗尽，且不同板卡，内存消耗程度不同。系统版本RHEL7.2。</p></blockquote><p>问题分析：<br>其中系统下内存使用状态如下：<br><img src="http://wx2.sinaimg.cn/mw690/6a6ccd8fly1fznv0z244oj20d505agls.jpg" alt="图5"><br>从图中看出似乎/tmp下被占用了562MB空间，实际分析/tmp并无大文件，此处应该是df命令的解析错误BUG。<br>对系统其他文件夹分析后，发现/var路径占用过大。<br>只读属性的文件系统，在硬盘分区配成只读后，会将必须保证读写能力的文件系统路径以tmpfs（内存文件系统）的形式挂载到系统（由/etc/rwtab可配），其中/var路径就是该种情况。<br>进一步分析/var路径，如下图所示：/var/crash和/var/spool/abrt路径下会存在一些vmcore文件夹，以该板卡为例，/var/spool/abrt下的vmcore文件就已经占用了555MB。<br><img src="http://wx2.sinaimg.cn/mw690/6a6ccd8fly1fznv12sc9gj20c803u74d.jpg" alt="图6"><br>该文件是kdump机制生成的用于分析内核崩溃原因的dump文件，该选项在安装系统时可选择是否使能。<br>通过这个结论可以推出问题的原因：<br>应用在开发的过程中，可能发生了一些导致内核崩溃的操作，内核依托kdump机制生成了vmcore文件到/var/crash和/var/spool/abrt下，占用了大部分的内存文件系统空间（也即内存空间，甚者会导致1.9G耗尽）</p><p>问题解决：<br>方案1：已经安装好系统，且系统使能kdump<br>1、还原文件系统为可读写属性，重启<br>2、删除/var/crash和/var/spool/abrt下的vmcore文件夹<br>3、systemctl disable kdump （关闭kdump服务）<br>4、还原文件系统为只读属性，重启</p><p>方案2：从源头解决。<br>安装系统过程中，不使能kdump功能。<br>坏处是，内核崩溃只能实时查看栈信息，无法保存。<br>可鉴于实际使用环境，自主选择是否使能。</p><p>PS：内存文件系统tmpfs最大为内存的一半，该项目系板卡物理内存4GB，所以tmpfs最大容量为2GB，原则上该上限可由内核选项配置。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;系统是运行在内存中的，硬盘只是系统运行中的存储媒介。当硬盘对应到内存的数据发生改变时，就需要系统将内存的数据同步更新到硬盘进行存储。&lt;br&gt;异常掉电之所以具备破坏力，是因为异常掉电会不可预知的中断系统将内存数据回写到硬盘的过程，直接导致文件系统数据紊乱。绝大多数带有日志的文件系统（ext3，ext4，xfs等），大多数情况可以依靠文件系统日志自恢复或者依靠fsck命令恢复，问题是并不是所有损坏都可以被修复。&lt;br&gt;因此，将整个系统设置为只读模式，防止整个回写过程的发生就成了整个方案的出发点。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://jxbuaa.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Linux" scheme="http://jxbuaa.github.io/tags/Linux/"/>
    
      <category term="System Configuration" scheme="http://jxbuaa.github.io/tags/System-Configuration/"/>
    
  </entry>
  
  <entry>
    <title>以太网PHY初始化流程</title>
    <link href="http://jxbuaa.github.io/2019/01/%E4%BB%A5%E5%A4%AA%E7%BD%91PHY%E5%88%9D%E5%A7%8B%E5%8C%96%E6%B5%81%E7%A8%8B/"/>
    <id>http://jxbuaa.github.io/2019/01/以太网PHY初始化流程/</id>
    <published>2019-01-28T02:05:35.000Z</published>
    <updated>2019-01-28T15:26:27.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>简单梳理Linux-3.12.37内核以太网PHY芯片初始化基本流程。</p><span id="more"></span><p>Linux-3.12.37 phy驱动匹配流程<br>1.内核扫描设备树mdio节点，匹配[.compatible = “fsl,fman-mdio”,]-&gt;<br>2.调用fsl_pq_mdio_probe() —— Fsl_pq_mdio.c (drivers\net\ethernet\freescale) -&gt;<br>3.调用of_mdiobus_register()注册mdiobus —— Of_mdio.c (drivers\of) -&gt;<br>4.扫描设备树创建struct phy_device *phy设备数据结构 —— Of_mdio.c (drivers\of) -&gt;<br>5.调用phy_device_register()注册phy设备数据结构 —— Phy_device.c (drivers\net\phy) -&gt;<br>6.调用device_add()将phy设备数据结构的dev添加到dev层级 —— Core.c (drivers\base)    -&gt;<br>7.调用bus_probe_device()执行dev和driver的匹配 —— Bus.c (drivers\base) -&gt;<br>8.调用device_attach() Try to attach device to a driver —— Dd.c (drivers\base) -&gt;<br>9.调用bus_for_each_drv(dev-&gt;bus, NULL, dev, _device_attach)枚举<br>　注册到mdiobus上的驱动 —— Bus.c (drivers\base) -&gt;<br>10.枚举所有驱动并逐一执行__device_attach()做最后的dev和driver的匹配 —— Dd.c (drivers\base)    -&gt;<br>11.调用driver_match_device()执行drv-&gt;bus-&gt;match —— Base.h (drivers\base) -&gt;<br>12.驱动接口实例mdio_bus_match() —— Mdio_bus.c (drivers\net\phy) -&gt;</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">bus_type</span> <span class="title">mdio_bus_type</span> =</span> &#123;</span><br><span class="line">.name= <span class="string">&quot;mdio_bus&quot;</span>,</span><br><span class="line">.match= mdio_bus_match,</span><br><span class="line">.pm= MDIO_BUS_PM_OPS,</span><br><span class="line">.dev_attrs= mdio_dev_attrs,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>13.调用mdio_bus_match()设备和驱动的ID匹配上后，执行driver_probe_device()，进行设备和驱动的关联，如果有probe实例，则执行probe函数 —— Dd.c (drivers\base) dev-&gt;driver = drv</p><p>另，ifconfig配IP时，会调用phy_attach()接口，Do initial configuration here</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;简单梳理Linux-3.12.37内核以太网PHY芯片初始化基本流程。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://jxbuaa.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Linux" scheme="http://jxbuaa.github.io/tags/Linux/"/>
    
      <category term="Driver" scheme="http://jxbuaa.github.io/tags/Driver/"/>
    
      <category term="PHY" scheme="http://jxbuaa.github.io/tags/PHY/"/>
    
  </entry>
  
  <entry>
    <title>PCIE初始化流程</title>
    <link href="http://jxbuaa.github.io/2019/01/PCIE%E5%88%9D%E5%A7%8B%E5%8C%96%E6%B5%81%E7%A8%8B/"/>
    <id>http://jxbuaa.github.io/2019/01/PCIE初始化流程/</id>
    <published>2019-01-28T01:53:20.000Z</published>
    <updated>2019-01-28T14:43:39.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>简单梳理Linux-2-6.23内核，Freescale MPC8548平台初始化及扫描基本流程。</p><span id="more"></span><p>Linux-2-6.23内核，Freescale MPC8548平台PCIE扫描<br>1.创建控制器host</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mpc85xx_cds_setup_arch -- Mpc85xx_cds.c (arch\powerpc\platforms\<span class="number">85</span>xx)</span><br><span class="line">fsl_add_bridge -- Fsl_pci.c (arch\powerpc\sysdev)</span><br><span class="line">pcibios_alloc_controller -- Pci-common.c (arch\powerpc\kernel)</span><br><span class="line">pci_setup_pci_controller -- Pci-common.c (arch\powerpc\kernel)</span><br></pre></td></tr></table></figure><p>2.创建总线bus</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pcibios_init -- Pci_32.c (arch\powerpc\kernel)</span><br><span class="line">pci_scan_bus_parented -- Probe.c (drivers\pci)</span><br><span class="line">pci_create_bus -- Probe.c (drivers\pci)</span><br></pre></td></tr></table></figure><p>3.深度扫描设备节点</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pci_scan_child_bus -- Probe.c (drivers\pci)</span><br><span class="line">pci_scan_slot -- Probe.c (drivers\pci)</span><br><span class="line">pci_scan_single_device -- Probe.c (drivers\pci)</span><br><span class="line">pci_scan_device -- Probe.c (drivers\pci)</span><br><span class="line">alloc_pci_dev -- Probe.c (drivers\pci) -&gt; 创建pcie设备节点</span><br></pre></td></tr></table></figure><p>4.扫描结束创建irq映射关系</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">pcibios_fixup_bus -- Pci_32.c (arch\powerpc\kernel)</span><br><span class="line">pci_read_irq_line -- Pci-common.c (arch\powerpc\kernel)<span class="number">12528</span><span class="number">2015</span><span class="number">-12</span><span class="number">-21</span></span><br><span class="line">of_irq_map_pci -- Pci-common.c (arch\powerpc\kernel) -&gt; 从设备树获取irq信息</span><br><span class="line">pci_device_to_OF_node -- Pci_32.c (arch\powerpc\kernel)</span><br><span class="line">pci_busdev_to_OF_node -- Pci_32.c (arch\powerpc\kernel)</span><br><span class="line">irq_create_of_mapping -- Irq.c (arch\powerpc\kernel)-&gt; 创建虚拟irq 即 virq</span><br><span class="line"><span class="comment">/* If host has no translation, then we assume interrupt line */</span></span><br><span class="line"><span class="keyword">if</span> (host-&gt;ops-&gt;xlate == <span class="literal">NULL</span>)</span><br><span class="line">hwirq = intspec[<span class="number">0</span>];</span><br><span class="line">virq = irq_create_mapping(host, hwirq)</span><br></pre></td></tr></table></figure><p>至此将硬件irq和虚拟irq关联<br>设备在创建驱动时，注册对应该设备的virq</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;简单梳理Linux-2-6.23内核，Freescale MPC8548平台初始化及扫描基本流程。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://jxbuaa.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Linux" scheme="http://jxbuaa.github.io/tags/Linux/"/>
    
      <category term="Driver" scheme="http://jxbuaa.github.io/tags/Driver/"/>
    
      <category term="PCIE" scheme="http://jxbuaa.github.io/tags/PCIE/"/>
    
  </entry>
  
  <entry>
    <title>RapidIO递归枚举流程</title>
    <link href="http://jxbuaa.github.io/2019/01/RapidIO%E9%80%92%E5%BD%92%E6%9E%9A%E4%B8%BE%E6%B5%81%E7%A8%8B/"/>
    <id>http://jxbuaa.github.io/2019/01/RapidIO递归枚举流程/</id>
    <published>2019-01-28T01:30:45.000Z</published>
    <updated>2019-01-28T14:42:36.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>简单梳理内核RapidIO递归枚举节点基本流程。</p><span id="more"></span><p>1.rio_mport_is_active读取0x158 (port0), 0x178 (port1), 0x198 (port2),….0x338 (port15)寄存器来判断该mport对应的port口是否处于active</p><blockquote><p>The input and output ports are initialized and the port is exchanging error-free control symbols with the attached device.</p></blockquote><p>2.枚举时，rio_mport_chk_dev_access通过判断RIO_DEV_ID_CAR（0x0）寄存器的值，来判断对应跳数下的设备是否能够顺利访问</p><p>3.主体枚举函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">rio_enum_peer</span><span class="params">(struct rio_net *net, struct rio_mport *port,u8 hopcount, struct rio_dev *prev, <span class="keyword">int</span> prev_port)</span></span></span><br></pre></td></tr></table></figure><p>4.找到新设备以后，调用rio_setup_device读取该设备相关属性并建立设备链表节点<br>　　4.1 读RIO_PEF_CAR（0x10）判断该设备类型（EP or SWITCH）；<br>　　4.2 读取RIO_SWP_INFO_CAR（0x14）判断该SWITCH有多少port，当前维护空间访问的对应port<br>　　4.3 读取RIO_DEV_ID_CAR（0x0）设备ID，厂商ID<br>　　4.4 如果该设备是SWITCH，则初始化清空路由表</p><p>5.rio_enum_peer判断该设备是否是SWITCH，是则按照port数量建立路由表<br>　　5.1 扫描各个port，调用rio_sport_is_active判断交换机的该port是否处于active（同1）<br>　　　　5.1.1 如果交换机的该port是acrive，则添加路由节点至SWITCH寄存器0x70、0x74 ，<br>　　　　　　　并标记（rswitch-&gt;port_ok）。<br>　　　　　　　深度优先，跳数+1，递归调用rio_enum_peer继续在该port下枚举（每个port枚举到底）<br>　　　　5.1.2 如果该port非active，则置位该port的0x15c寄存器Port lockout位,<br>　　　　　　　并标记（rswitch-&gt;port_ok）</p><blockquote><p>This port is stopped and is not enabled to issue or receive any packets</p></blockquote><h1 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h1><p>discover的流程跟enumerate基本一致。<br>核心思想：深度轮询各个port，往0x70写入id，从0x74读回port值，比对当前轮询的port。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;简单梳理内核RapidIO递归枚举节点基本流程。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://jxbuaa.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Linux" scheme="http://jxbuaa.github.io/tags/Linux/"/>
    
      <category term="Driver" scheme="http://jxbuaa.github.io/tags/Driver/"/>
    
      <category term="RapidIO" scheme="http://jxbuaa.github.io/tags/RapidIO/"/>
    
  </entry>
  
  <entry>
    <title>网卡研究一：驱动框架剖析</title>
    <link href="http://jxbuaa.github.io/2019/01/%E7%BD%91%E5%8D%A1%E7%A0%94%E7%A9%B6%E4%B8%80%EF%BC%9A%E9%A9%B1%E5%8A%A8%E6%A1%86%E6%9E%B6%E5%89%96%E6%9E%90/"/>
    <id>http://jxbuaa.github.io/2019/01/网卡研究一：驱动框架剖析/</id>
    <published>2019-01-27T08:49:25.000Z</published>
    <updated>2019-01-27T10:20:31.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本系列计划以<font color=red>优化网卡侧UDP高速小包抓取</font>需求为着力点，<br>从<strong>网卡驱动分析</strong>、<strong>网卡多队列中断均衡优化</strong>、<strong>网卡侧零拷贝抓取</strong>实现三个递进深度详细阐述网卡驱动的工作机制。<br>作为系列第一作，本文以Intel 82580、Intel 82571/4两款网卡为对象，<br>详细分析<strong>网卡驱动的数据结构管理</strong>、<strong>多队列/单队列收发包处理</strong>、<strong>NAPI调用机制</strong>等模块，为后续的优化工作打下基础。</p><span id="more"></span><p>操作系统：RHEL7.2<br>内核版本：linux-3.10.0-327.el7.x86_64<br>驱动框架：<br>Intel 82580：igb<br>Intel 82571/4：e1000e</p><h1 id="数据结构框图分析"><a href="#数据结构框图分析" class="headerlink" title="数据结构框图分析"></a>数据结构框图分析</h1><p>多队列网卡是以后网卡能力的基本配置，也是性能提升的基础。<br>因此首先分析Intel 82580：igb驱动框架。网卡硬件框架如图1所示，驱动数据结构和数据流关系如图2所示：<br><img src="http://wx1.sinaimg.cn/mw690/6a6ccd8fly1fzl8damuxlj20nx0h2n01.jpg" alt="图1"><p align="center">图1 网卡硬件框架</p></p><p><img src="http://wx4.sinaimg.cn/mw690/6a6ccd8fly1fzl8ddejr0j21790qymzg.jpg" alt="图2"><p align="center">图2 驱动数据结构和数据流关系</p></p><p>图2中黑色箭头表RX数据结构关系，<font color=red>红色箭头</font>表示TX数据结构关系。首先从数据流的角度简要分析：<br><img src="http://wx3.sinaimg.cn/mw690/6a6ccd8fly1fzl9galhi2j20qh0b4q3o.jpg" alt="图3"><p align="center">图3 硬件队列指针</p></p><p>RX：网卡硬件MAC层收到数据后，根据驱动初始化配置好的rx_desc接收缓冲描述符，利用DMA将硬件RX FIFO中的数据拷贝到内核缓冲rx_buffer中，接收缓冲是以内存page页为管理对象。随后经过驱动处理，将rx_buffer中对应page页挂接到skb中，skb为整个内核网络数据流管理的对象。内核协议栈收到skb后针对不同协议要求进行处理，最后将净载荷拷贝至用户层完成RX工作。<br>TX：用户层调用网络send接口，内核将数据拷贝至skb管理的缓冲。随后经过驱动处理，直接将skb-&gt;data对应的内核缓冲以流式DMA映射的方式拿到对应的page页，填充到tx_desc描述符中，并在最后一帧的描述符tx_desc中将EOP(End of Packet)置位，同时更新硬件指针如图3所示。网卡通过硬件指针检测到有待发数据，利用DMA将内核缓冲中的数据拷贝至硬件TX FIFO中发送到对端计算机。</p><h1 id="数据结构详细分析"><a href="#数据结构详细分析" class="headerlink" title="数据结构详细分析"></a>数据结构详细分析</h1><p>下面对驱动中的具体数据结构如图4所示进行分析。由于数据结构多且复杂，转成图4画质较低。<br>图中黑色箭头及①类数字表示RX相关数据结构，<font color=red>红色箭头</font>及❶类数字表示TX相关数据结构。<br><img src="http://wx4.sinaimg.cn/mw690/6a6ccd8fly1fzl8dl4ydpj217b0q5teu.jpg" alt="图4"><p align="center">图4 驱动数据结构</p><br>8核CPU下的82580网卡驱动默认属性如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* set default ring sizes */</span></span><br><span class="line">adapter-&gt;tx_ring_count = IGB_DEFAULT_TXD = <span class="number">256</span>;</span><br><span class="line">adapter-&gt;rx_ring_count = IGB_DEFAULT_RXD = <span class="number">256</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* set default ITR values */</span></span><br><span class="line">adapter-&gt;rx_itr_setting = IGB_DEFAULT_ITR = <span class="number">3</span>;</span><br><span class="line">adapter-&gt;tx_itr_setting = IGB_DEFAULT_ITR = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* set default work limits */</span></span><br><span class="line">adapter-&gt;tx_work_limit = IGB_DEFAULT_TX_WORK = <span class="number">128</span>;</span><br><span class="line"></span><br><span class="line">max_rss_queues = IGB_MAX_RX_QUEUES = <span class="number">8</span></span><br><span class="line"></span><br><span class="line">adapter-&gt;rss_queues = <span class="keyword">min_t</span>(u32, max_rss_queues, num_online_cpus()) = <span class="number">8</span></span><br><span class="line"></span><br><span class="line">adapter-&gt;num_rx_queues = adapter-&gt;rss_queues = <span class="number">8</span></span><br><span class="line">adapter-&gt;num_tx_queues = adapter-&gt;rss_queues = <span class="number">8</span></span><br><span class="line"></span><br><span class="line">adapter-&gt;num_q_vectors = numvecs = <span class="number">8</span></span><br></pre></td></tr></table></figure><p>针对每个网卡接口，内核会抽象adapter数据结构，根据82580网卡支持收发各8个硬件队列属性，该adapter包含8个struct igb_q_vector数据结构。<br>RX：<br>① igb_q_vector包含tx，rx各一个struct igb_ring_container，用以维护ring属性；<br>② igb_q_vector包含tx，rx各一个struct igb_ring，用以维护ring具体属性，是整个网卡管理核心数据结构；<br>③ 每个队列对应各自硬件中断，各自igb_q_vector，各自napi_struct数据结构，各自napi poll回调接口以轮询处理网卡数据包；<br>④ rx igb_ring根据网卡属性配置IGB_DEFAULT_RXD = 256分配256个igb_rx_buffer，用以维护rx buffer物理地址及对应page页，填充rx_desc描述符。同时维护skb数据结构，在rx buffer收到数据后，关联skb送入协议栈进行处理；<br>⑤ rx igb_ring根据网卡属性配置IGB_DEFAULT_RXD = 256分配256个adv_rx_desc，用以维护硬件描述符，是软件与硬件交互的关键数据结构；<br>⑥ igb_rx_buffer及adv_rx_desc数据结构通过dma_map_page指向同一page页，为接收硬件DMA数据实体<br>TX：<br>❶ 用户态通过拷贝数据，将数据传入内核协议栈；<br>❷ 协议栈以skb为管理对象，将数据依托skb传入igb_tx_buffer；<br>❸ 驱动将skb-&gt;data以dma_map_single（流式DMA映射 ）方式拿到物理地址，填充adv_tx_desc描述符；</p><h1 id="函数接口调用分析"><a href="#函数接口调用分析" class="headerlink" title="函数接口调用分析"></a>函数接口调用分析</h1><p>在进行下述分析前，先引入几个概念，取自linux-3.10.0-327.el7\Documentation\networking\scaling.txt，这里放上网上找来的部分翻译版本便于快速理解，建议读原文：</p><ul><li><p>RSS: Receive Side Scaling<br>————————————<br>当代的NICs支持多个接收和传输队列，即多队列。接收的时候，一个网卡能够发送不同的包到不同的队列，为了在不同的CPU之间分散处理。<font color=red>NIC针对每一个包，通过一个过滤器来指定这个包属于少数几个流中的一个流。每个流中的数据包被控制在一个单独的接收队列中，而队列轮回的被CPU进行处理</font>。这种机制就叫做RSS。RSS的目标和其他控制技术目的都是为了增加性能。多队列也可以被用于流量优先控制，但那不是这些技术的目的。<br>RSS中的过滤器是一个基于L3和L4层头部的hash函数，例如，基于IP地址和TCP端口的4元组的hash函数。最常见的RSS硬件实现中，使用了128个间接表，其中每个表存储一个队列号(注，网卡的队列数比较少，比如igb是8个，bnx2是5个)。针对某个包而言，使用这个包计算出的hash值（hash是Toeplitz算法）的低7位先确定间接表，再从间接表中的值访问队列。一些高级的NICs允许使用可编程的过滤器来控制包属于哪个队列。例如，绑定TCP端口80的webserver，数据包能被指向他们自己的队列。</p></li><li><p>RPS: Receive Packet Steering<br>————————————<br>RPS，逻辑上是一种以软件的方式来实现RSS。在数据路径上，稍后被调用。介于RSS选择了队列和CPU(这个cpu会处理硬中断)，<font color=red>RPS选择CPU来执行硬件中断处理之后的协议处理。通过把数据包放在目标CPU的backlog队列，并唤醒CPU来处理</font>。RPS相比RSS有几个好处：<br>1） RPS能够被任何NIC使用。<br>2） 软件过滤器能够轻易的被添加，用来hash新的协议。<br>3） 它不会增加硬件设备的中断。尽管，引入了IPIs(inter-processor interrupts)。<br>当一个设备使用 netif_rx() 函数和netif_receive_skb()函数，(从网卡驱动)向网络协议栈传递数据包时，RPS在底半环境（通过软中断来实现的，在硬中断处理函数之后。）中被调用。这2个函数调用get_rps_cpu()函数，来选择应该执行包的队列。决定目标CPU的第一步是基于包的地址和端口（有的协议是2元组，有的协议是4元组）来计算hash值。这个值与这个包的流保持一致。这个hash值要么是由硬件来提供的，<br>要么是由协议栈来计算的。厉害的硬件能够在包的接收描述符中传递hash值，这个值与RSS计算的值是相等的。这个hash值保存在skb-&gt;rx_hash中，并且这个值可以作为流的hash值可以被使用在栈的其他任何地方。每一个接收硬件队列有一个相关的CPU列表，RPS可以将包放到这个队列中进行处理。对于每一个接收到的包，指向这个列表的索引是通过流hash值对列表大小取模来计算的。被指向的CPU是处理 数据包的目标CPU，并且这个包被加到CPU的backlog队列的尾部。最底半处理的最后，IPI被发送到这个包所插到的那个CPU。IPI唤醒远程CPU来处理backlog队列，之后队列中数据包被发送到网络协议栈进行处理。</p></li><li><p>RFS: Receive Flow Steering<br>————————————<br>RPS只依靠hash来控制数据包，提供了好的负载平衡，但是它没有考虑应用程序的位置(注：这个位置是指程序在哪个cpu上执行)。RFS则考虑到了应用程序的位置。<font color=red>RFS的目标是通过指派应用线程正在运行的CPU来进行数据包处理，以此来增加数据缓存的命中率</font>。RFS依靠RPS的机制插入数据包到指定CPU的backlog队列，并唤醒那个CPU来执行。</p></li><li><p>XPS: Transmit Packet Steering<br>————————————<br>XPS 是一种机制，用来智能的选择多队列设备的队列来发送数据包。为了达到这个目标，从CPU到硬件队列的映射需要被记录。这个映射的目标是专门地分配队列到一个CPU列表，这些CPU列表中的某个CPU来完成队列中的数据传输。这个有两点优势，<font color=red>第一点，设备队列上的锁竞争会被减少，因为只有很少的CPU对相同的队列进行竞争。（如果每个CPU只有自己的传输队列，锁的竞争就完全没有了。）第二点，传输时的缓存不命中的概率就减少，特别是持有sk_buff的数据缓存</font>。<br><img src="http://wx3.sinaimg.cn/mw690/6a6ccd8fly1fzl8f0dpw6j20ty0qodip.jpg" alt="图5"><p align="center">图5 多队列处理框架</p></p></li></ul><p>简而言之，RSS是为了发挥网卡多队列处理性能，RPS则是软件层将数据包分发到多个CPU上进行处理（同时要保证cache一致性）。对于一个多队列的系统，如果RSS已经配置了，导致一个硬件接收队列已经映射到每一个CPU，那么RPS就是多余的和不必要的；如果只有很少的硬件中断队列(比CPU个数少)，每个队列的rps_cpus指向的CPU列表与这个队列的中断CPU共享相同的内存域，那RPS将会是有效的。RFS则是为了增加内核层切换到用户层的cache命中率，XFS同理。网卡多队列处理框架如图5所示。</p><p>RX：<br>① 硬件中断顶半部处理，分队列处理；<br>② 硬件低半部处理；<br>③ napi轮询回调；<br>④ 网卡接收数据处理轮询接口，不同队列接收处理的数据，根据五元组hash值入列到依托RPS(Receive Packet Steering)机制选取的CPU的backlog队列，后续的协议栈处理由该CPU处理；<br>⑤ 在④对应的CPU轮询处理自己的backlog队列，接入协议栈处理；<br>⑥ IP层数据处理，如果在该层插入自定义协议，则可从该层将符合自定义协议的数据包截获，<font color=red>PF_RING就是利用了这个机制将包截获处理</font>；<br>⑦ TCP/UDP/ICMP/IGMP等协议处理。</p><p>硬件接收中断</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-&gt; igb_msix_ring  中断服务函数（分队列处理）</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-&gt; napi_schedule -&gt; napi_schedule_prep</span><br><span class="line">   检测napi-&gt;state, NAPI_STATE_SCHED是否置位允许napi调度</span><br><span class="line">-&gt; __napi_schedule -&gt; ____napi_schedule </span><br><span class="line">   关闭硬件中断，并将该napi-&gt;poll_list添加到全局轮询队列poll_list</span><br><span class="line">-&gt; __raise_softirq_irqoff(NET_RX_SOFTIRQ) 产生napi软件中断</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-&gt; net_rx_action 软中断服务函数</span><br><span class="line">   只要全局poll_list队列不为空，则一直轮询处理</span><br><span class="line">   当轮询完成预设目标任务budget，或者<span class="number">2</span>秒轮询超时后强制退出则结束napi轮询，重新使能中断</span><br><span class="line">-&gt; n-&gt;poll -&gt; igb_poll 回调网卡轮询处理接口</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">-&gt; igb_clean_rx_irq</span><br><span class="line">-&gt; igb_alloc_rx_buffers</span><br><span class="line">   判断回收rx_buffer超过IGB_RX_BUFFER_WRITE(<span class="number">16</span>),一次性补充<span class="number">16</span>个buffer</span><br><span class="line">-&gt; igb_fetch_rx_buffer      申请skb并将rx_buffer数据page挂接到skb</span><br><span class="line">-&gt; napi_gro_receive</span><br><span class="line">   判断网卡是否支持GRO(Generic Segmentation Offload)</span><br><span class="line">   相对应的有TSO(TCP Segmentation Offload)</span><br><span class="line">-&gt; napi_skb_finish -&gt; netif_receive_skb</span><br><span class="line">   使能CONFIG_RPS(Receive Packet Steering)时</span><br><span class="line">-&gt; get_rps_cpu              依据skb-&gt;hash获取后续传输层协议栈处理target CPU</span><br><span class="line">-&gt; enqueue_to_backlog -&gt; __skb_queue_tail</span><br><span class="line">   将各个队列的skb入列到对应处理target CPU的input_pkt_queue</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-&gt; ____napi_schedule </span><br><span class="line">-&gt; __raise_softirq_irqoff(NET_RX_SOFTIRQ) 产生sd-&gt;backlog软件中断</span><br><span class="line">-&gt; net_rx_action                软中断服务函数</span><br><span class="line">-&gt; n-&gt;poll -&gt; process_backlog回调backlog的轮询处理函数</span><br><span class="line">-&gt; __skb_dequeue            从队列中出列待处理skb</span><br><span class="line">-&gt; __netif_receive_skb -&gt; __netif_receive_skb_core </span><br><span class="line">   开始处理网络层skb</span><br><span class="line">   根据注册skb-&gt;protocol搜索pt_prev <span class="comment">/* Protocol hook */</span></span><br><span class="line">-&gt; deliver_skb -&gt; pt_prev-&gt;func </span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">-&gt; ip_rcv               IP层数据处理，net/ipv4/af_inet.c注册</span><br><span class="line">   若注册pf_ring的packet_type，则调用pfring rcv</span><br><span class="line">   prot_hook.func = packet_rcv;</span><br><span class="line">   prot_hook.type = htons(ETH_P_ALL);</span><br><span class="line">-&gt; ip_rcv_finish -&gt; dst_input <span class="comment">/* Input packet from network to transport */</span></span><br><span class="line">-&gt; skb_dst(skb)-&gt;input(skb) </span><br><span class="line">-&gt; ip_local_deliver -&gt; ip_defrag <span class="comment">/* Reassemble IP fragments. */</span></span><br><span class="line">-&gt; ip_local_deliver_finish </span><br><span class="line">   根据注册inet_protos搜索ipprot</span><br><span class="line">   tcp_protocol, udp_protocol, icmp_protocol, igmp_protocol等</span><br><span class="line">   在net/ipv4/af_inet.c，inet_init注册，以tcp为例</span><br><span class="line">-&gt; tcp/udp层 -&gt; ipprot-&gt;handler </span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-&gt; tcp_v4_rcv(udp_rcv) -&gt; tcp_v4_do_rcv </span><br><span class="line">-&gt; tcp_rcv_state_process </span><br><span class="line">-&gt; <span class="keyword">case</span> TCP_ESTABLISHED: tcp_data_queue </span><br><span class="line">-&gt; tcp_queue_rcv </span><br><span class="line">-&gt; __skb_queue_tail <span class="comment">/* queue a buffer at the list tail */</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-&gt; napi_complete            结束轮询</span><br><span class="line">-&gt; igb_ring_irq_enable重新使能硬件中断</span><br></pre></td></tr></table></figure><p>由于发送流程相对一致、简单，这里只对接口功能进行注释，不做赘述。<br>TX：网络发送流程</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">应用层send -&gt; copy_from_user </span><br><span class="line">-&gt; 内核层skb -&gt; 协议栈 </span><br><span class="line">-&gt; 分队列</span><br><span class="line">-&gt; ndo_start_xmit -&gt; igb_xmit_frame</span><br><span class="line">-&gt; igb_xmit_frame_ring </span><br><span class="line">-&gt; igb_tx_queue_mapping     根据skb-&gt;queue_mapping获取对应发送队列tx_ring</span><br><span class="line">-&gt; igb_xmit_frame_ring      skb填充tx_ring-&gt;tx_buffer_info</span><br><span class="line">-&gt; <span class="function">igb_tso                  <span class="title">TSO</span><span class="params">(TCP Segmentation Offload)</span></span></span><br><span class="line"><span class="function">-&gt; igb_tx_map</span></span><br><span class="line"><span class="function">将skb流式映射dma_map_single填充描述符tx_desc</span></span><br><span class="line"><span class="function">并在最后一帧的描述符tx_desc中将<span class="title">EOP</span><span class="params">(End of Packet)</span>置位</span></span><br></pre></td></tr></table></figure><p>硬件发送完成中断</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">-&gt; igb_msix_ring                            中断服务函数（分队列处理）</span><br><span class="line">-&gt; napi_schedule -&gt; napi_schedule_prep</span><br><span class="line">   检测napi-&gt;state, NAPI_STATE_SCHED是否置位允许napi调度</span><br><span class="line">-&gt; __napi_schedule -&gt; ____napi_schedule </span><br><span class="line">   关闭硬件中断，并将该napi-&gt;poll_list添加到全局轮询队列poll_list</span><br><span class="line">-&gt; __raise_softirq_irqoff(NET_RX_SOFTIRQ)   产生napi软件中断</span><br><span class="line">-&gt; net_rx_action                            软中断服务函数</span><br><span class="line">   只要全局poll_list队列不为空，则一直轮询处理</span><br><span class="line">   当轮询完成预设目标任务budget，或者<span class="number">2</span>秒轮询超时后强制退出则结束napi轮询，重新使能中断</span><br><span class="line">-&gt; n-&gt;poll -&gt; igb_poll                      回调网卡轮询处理接口   </span><br><span class="line">-&gt; igb_clean_tx_irq                     释放skb，dma_unmap_single</span><br></pre></td></tr></table></figure><h1 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h1><p>本文在对Intel82580网卡驱动分析的基础上，梳理了各部数据结构间的关联关系，总结了网卡收发数据流的处理流程。<br>那么，多队列和CPU中断之间均衡处理关系到底应该如何优化，中断均衡是否能够带来实质性的性能提升，落实到具体实测数据多队列网卡表现又是如何，请看网卡研究二：中断均衡优化。</p><p>PS：在研究之初对网卡队列并没有过多的理解，所以选择了单队列网卡Intel 82574（e1000e）开始分析，其数据结构关系和收发流程与多队列网卡大同小异，在此不做赘述。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;本系列计划以&lt;font color=red&gt;优化网卡侧UDP高速小包抓取&lt;/font&gt;需求为着力点，&lt;br&gt;从&lt;strong&gt;网卡驱动分析&lt;/strong&gt;、&lt;strong&gt;网卡多队列中断均衡优化&lt;/strong&gt;、&lt;strong&gt;网卡侧零拷贝抓取&lt;/strong&gt;实现三个递进深度详细阐述网卡驱动的工作机制。&lt;br&gt;作为系列第一作，本文以Intel 82580、Intel 82571/4两款网卡为对象，&lt;br&gt;详细分析&lt;strong&gt;网卡驱动的数据结构管理&lt;/strong&gt;、&lt;strong&gt;多队列/单队列收发包处理&lt;/strong&gt;、&lt;strong&gt;NAPI调用机制&lt;/strong&gt;等模块，为后续的优化工作打下基础。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://jxbuaa.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Linux" scheme="http://jxbuaa.github.io/tags/Linux/"/>
    
      <category term="Driver" scheme="http://jxbuaa.github.io/tags/Driver/"/>
    
      <category term="NIC" scheme="http://jxbuaa.github.io/tags/NIC/"/>
    
  </entry>
  
  <entry>
    <title>Hexo_NexT主题配置</title>
    <link href="http://jxbuaa.github.io/2019/01/Hexo_NexT%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/"/>
    <id>http://jxbuaa.github.io/2019/01/Hexo_NexT主题配置/</id>
    <published>2019-01-26T16:37:37.000Z</published>
    <updated>2021-08-24T06:51:44.795Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hexo-NexT主题定制化修改"><a href="#Hexo-NexT主题定制化修改" class="headerlink" title="Hexo NexT主题定制化修改"></a>Hexo NexT主题定制化修改</h1><p>折腾几天，总算是有了自己的Blog，也算是一个新的开始。<br>NexT主题的装修也零零散散花了些时间，期间也参考了不少其他博主的配置，总算<br>是部署成自己比较钟意的样式了。</p><span id="more"></span><p>为了便于之后的维护，对NexT主题配置文件的修改记录如下：</p><p>1.修改<strong>languages\zh-Hans.yml</strong>  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">修改</span><br><span class="line">overview: 站点概览 -&gt; 关于作者</span><br><span class="line">in: 分类于 -&gt; 分类</span><br><span class="line">添加</span><br><span class="line">commentcount: 评论数</span><br></pre></td></tr></table></figure><p>2.修改<strong>layout_macro\post.swig</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">在“评论数”的符号后添加中文描述</span><br><span class="line">&lt;span <span class="class"><span class="keyword">class</span>=</span><span class="string">&quot;post-meta-item-text&quot;</span>&gt;&#123;&#123;__(<span class="string">&#x27;post.commentcount&#x27;</span>)&#125;&#125;&amp;#<span class="number">58</span>;&lt;/span&gt;</span><br><span class="line"></span><br><span class="line">分享图标后面添加描述</span><br><span class="line">&lt;i <span class="class"><span class="keyword">class</span>=</span><span class="string">&quot;fa fa-share-alt&quot;</span> aria-hidden=<span class="string">&quot;true&quot;</span>&gt;分享页面|Share&lt;/i&gt;</span><br><span class="line"></span><br><span class="line">在文章末尾添加“The End”标记</span><br><span class="line">&lt;div&gt;</span><br><span class="line">    &#123;% <span class="keyword">if</span> <span class="keyword">not</span> is_index %&#125;</span><br><span class="line">    &#123;% include <span class="string">&#x27;passage-end-tag.swig&#x27;</span> %&#125;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">修改文件结尾标签前的“#”为标签图标</span><br><span class="line">&lt;a href=<span class="string">&quot;&#123;&#123; url_for(tag.path) &#125;&#125;&quot;</span> rel=<span class="string">&quot;tag&quot;</span>&gt;&lt;i class=<span class="string">&quot;fa fa-tag&quot;</span>&gt;&lt;/i&gt; &#123;&#123; tag.name &#125;&#125;&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">添加置顶功能执行</span><br><span class="line">$ npm uninstall hexo-generator-index --save</span><br><span class="line">$ npm install hexo-generator-index-pin-top --save</span><br><span class="line">添加置顶功能标签，插入到&lt;div class=<span class="string">&quot;post-meta&quot;</span>&gt;标签下</span><br><span class="line">&#123;% <span class="keyword">if</span> post.top %&#125;</span><br><span class="line">&lt;i class=<span class="string">&quot;fa fa-thumb-tack&quot;</span>&gt;&lt;/i&gt;</span><br><span class="line">&lt;font color=<span class="number">000000</span>&gt;置顶&lt;/font&gt;</span><br><span class="line">&lt;span class=<span class="string">&quot;post-meta-divider&quot;</span>&gt;|&lt;/span&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p>3.修改<strong>layout_partials\footer.swig</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">修改页面底部用户名前面的图标</span><br><span class="line">&lt;i <span class="class"><span class="keyword">class</span>=</span><span class="string">&quot;fa fa-address-card&quot;</span>&gt;&lt;/i&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>4.修改<strong>layout_partials\head.swig</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">添加如下段，配合DaoVoice的使能功能</span><br><span class="line">&#123;% <span class="keyword">if</span> theme.daovoice %&#125;</span><br><span class="line">  &lt;script&gt;  (function(i,s,o,g,r,a,m)&#123;i[<span class="string">&quot;DaoVoiceObject&quot;</span>]=r;i[r]=i[r]||function()&#123;(i[r].q=i[r].q||[]).push(arguments)&#125;,i[r].l=<span class="number">1</span>*<span class="keyword">new</span> Date();a=s.createElement(o),m=s.getElementsByTagName(o)[<span class="number">0</span>];a.async=<span class="number">1</span>;a.src=g;a.charset=<span class="string">&quot;utf-8&quot;</span>;m.parentNode.insertBefore(a,m)&#125;)(window,document,<span class="string">&quot;script&quot;</span>,(<span class="string">&#x27;https:&#x27;</span> == document.location.protocol ? <span class="string">&#x27;https:&#x27;</span> : <span class="string">&#x27;http:&#x27;</span>) + <span class="string">&quot;//widget.daovoice.io/widget/0f81ff2f.js&quot;</span>,<span class="string">&quot;daovoice&quot;</span>)</span><br><span class="line">  daovoice(<span class="string">&#x27;init&#x27;</span>, &#123;</span><br><span class="line">      app_id: <span class="string">&quot;&#123;&#123;theme.daovoice_app_id&#125;&#125;&quot;</span></span><br><span class="line">    &#125;);</span><br><span class="line">  daovoice(<span class="string">&#x27;update&#x27;</span>);</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p>5.修改<strong>layout_layout.swig</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">添加如下段，使能首页右上角github链接</span><br><span class="line">&lt;a href=<span class="string">&quot;https://github.com/jxbuaa&quot;</span> class=<span class="string">&quot;github-corner&quot;</span> aria-label=<span class="string">&quot;View source on GitHub&quot;</span>&gt;&lt;svg width=<span class="string">&quot;80&quot;</span> height=<span class="string">&quot;80&quot;</span> viewBox=<span class="string">&quot;0 0 250 250&quot;</span> style=<span class="string">&quot;fill:#151513; color:#fff; position: absolute; top: 0; border: 0; right: 0;&quot;</span> aria-hidden=<span class="string">&quot;true&quot;</span>&gt;&lt;path d=<span class="string">&quot;M0,0 L115,115 L130,115 L142,142 L250,250 L250,0 Z&quot;</span>&gt;&lt;/path&gt;&lt;path d=<span class="string">&quot;M128.3,109.0 C113.8,99.7 119.0,89.6 119.0,89.6 C122.0,82.7 120.5,78.6 120.5,78.6 C119.2,72.0 123.4,76.3 123.4,76.3 C127.3,80.9 125.5,87.3 125.5,87.3 C122.9,97.6 130.6,101.9 134.4,103.2&quot;</span> fill=<span class="string">&quot;currentColor&quot;</span> style=<span class="string">&quot;transform-origin: 130px 106px;&quot;</span> class=<span class="string">&quot;octo-arm&quot;</span>&gt;&lt;/path&gt;&lt;path d=<span class="string">&quot;M115.0,115.0 C114.9,115.1 118.7,116.5 119.8,115.4 L133.7,101.6 C136.9,99.2 139.9,98.4 142.2,98.6 C133.8,88.0 127.5,74.4 143.8,58.0 C148.5,53.4 154.0,51.2 159.7,51.0 C160.3,49.4 163.2,43.6 171.4,40.1 C171.4,40.1 176.1,42.5 178.8,56.2 C183.1,58.6 187.2,61.8 190.9,65.4 C194.5,69.0 197.7,73.2 200.1,77.6 C213.8,80.2 216.3,84.9 216.3,84.9 C212.7,93.1 206.9,96.0 205.4,96.6 C205.1,102.4 203.0,107.8 198.3,112.5 C181.9,128.9 168.3,122.5 157.7,114.1 C157.9,116.9 156.7,120.9 152.7,124.9 L141.0,136.5 C139.8,137.7 141.6,141.9 141.8,141.8 Z&quot;</span> fill=<span class="string">&quot;currentColor&quot;</span> class=<span class="string">&quot;octo-body&quot;</span>&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;style&gt;.github-corner:hover .octo-arm&#123;animation:octocat-wave <span class="number">560</span>ms ease-in-out&#125;@keyframes octocat-wave&#123;<span class="number">0</span>%,<span class="number">100</span>%&#123;transform:rotate(<span class="number">0</span>)&#125;<span class="number">20</span>%,<span class="number">60</span>%&#123;transform:rotate(<span class="number">-25</span>deg)&#125;<span class="number">40</span>%,<span class="number">80</span>%&#123;transform:rotate(<span class="number">10</span>deg)&#125;&#125;@media (max-width:<span class="number">500</span>px)&#123;.github-corner:hover .octo-arm&#123;animation:none&#125;.github-corner .octo-arm&#123;animation:octocat-wave <span class="number">560</span>ms ease-in-out&#125;&#125;&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">在swig末尾，&lt;/body&gt;前添加</span><br><span class="line">&lt;!-- 代码块复制功能 --&gt;</span><br><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span> src=<span class="string">&quot;/js/src/clipboard.min.js&quot;</span>&gt;&lt;/script&gt;  </span><br><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span> src=<span class="string">&quot;/js/src/clipboard-use.js&quot;</span>&gt;&lt;/script&gt; </span><br></pre></td></tr></table></figure><p>6.在<strong>source\js\src</strong>下添加两个js实现代码copy功能</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">clipboard.min.js</span><br><span class="line">clipboard-use.js</span><br></pre></td></tr></table></figure><p>7.修改<strong>source\css_common\components\sidebar\sidebar-author.styl</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">添加如下段，势能圆形头像和动态旋转效果</span><br><span class="line">border-radius: <span class="number">50</span>%;</span><br><span class="line">transition: <span class="number">1.5</span>s all;  </span><br><span class="line">.site-author-image:hover &#123;</span><br><span class="line">    transform: rotate(<span class="number">360</span>deg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>8.修改<strong>source\css_custom\custom.styl</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 修改网站头部颜色</span></span><br><span class="line"><span class="comment">/* .headband &#123;</span></span><br><span class="line"><span class="comment">    height: 3px;</span></span><br><span class="line"><span class="comment">    background: #bbb;</span></span><br><span class="line"><span class="comment">&#125; */</span></span><br><span class="line">.site-meta &#123;</span><br><span class="line">    padding: <span class="number">40</span>px <span class="number">0</span>;</span><br><span class="line">    color: <span class="meta">#fff;</span></span><br><span class="line">    background: $winered;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.site-subtitle &#123;</span><br><span class="line">    <span class="comment">// margin-top: 10px;</span></span><br><span class="line">    <span class="comment">// font-size: 13px;</span></span><br><span class="line">    color: <span class="meta">#ffffff;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改无序列表前的符号为&#x27;.&#x27;</span></span><br><span class="line">.posts-expand .post-body &#123;</span><br><span class="line">  ul li &#123; <span class="built_in">list</span>-style: square; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 鼠标移动至文章标题时的效果</span></span><br><span class="line">.posts-expand .post-title-link &#123;</span><br><span class="line">  &amp;::before &#123;</span><br><span class="line">    height: <span class="number">1</span>px;</span><br><span class="line">    background-color: $winered;</span><br><span class="line">  transition-duration: <span class="number">0</span>s;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  &amp;:hover &#123;</span><br><span class="line">    color: $winered;</span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//代码块复制按钮</span></span><br><span class="line">.highlight&#123;</span><br><span class="line">  <span class="comment">//方便copy代码按钮（btn-copy）的定位</span></span><br><span class="line">  position: relative;</span><br><span class="line">&#125;</span><br><span class="line">.btn-copy &#123;</span><br><span class="line">    display: <span class="keyword">inline</span>-block;</span><br><span class="line">    cursor: pointer;</span><br><span class="line">    background-color: <span class="meta">#eee;</span></span><br><span class="line">    background-image: linear-gradient(<span class="meta">#fcfcfc,#eee);</span></span><br><span class="line">    border: <span class="number">1</span>px solid #d5d5d5;</span><br><span class="line">    border-radius: <span class="number">3</span>px;</span><br><span class="line">    -webkit-user-select: none;</span><br><span class="line">    -moz-user-select: none;</span><br><span class="line">    -ms-user-select: none;</span><br><span class="line">    user-select: none;</span><br><span class="line">    -webkit-appearance: none;</span><br><span class="line">    font-size: <span class="number">13</span>px;</span><br><span class="line">    font-weight: <span class="number">700</span>;</span><br><span class="line">    line-height: <span class="number">20</span>px;</span><br><span class="line">    color: #<span class="number">333</span>;</span><br><span class="line">    -webkit-transition: opacity <span class="number">.3</span>s ease-in-out;</span><br><span class="line">    -o-transition: opacity <span class="number">.3</span>s ease-in-out;</span><br><span class="line">    transition: opacity <span class="number">.3</span>s ease-in-out;</span><br><span class="line">    padding: <span class="number">2</span>px <span class="number">6</span>px;</span><br><span class="line">    position: absolute;</span><br><span class="line">    right: <span class="number">5</span>px;</span><br><span class="line">    top: <span class="number">5</span>px;</span><br><span class="line">    opacity: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">.btn-copy span &#123;</span><br><span class="line">    margin-left: <span class="number">5</span>px;</span><br><span class="line">&#125;</span><br><span class="line">.highlight:hover .btn-copy&#123;</span><br><span class="line">  opacity: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>9.修改<strong>source\css_variables\custom.styl</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">$winered= rgba(<span class="number">174</span>,<span class="number">50</span>,<span class="number">54</span>,<span class="number">0.85</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Layout sizes</span></span><br><span class="line"><span class="comment">// --------------------------------------------------</span></span><br><span class="line">$main-desktop= <span class="number">80</span>%</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Background color for &lt;body&gt;</span></span><br><span class="line">$body-bg-color= gainsboro</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Pagination</span></span><br><span class="line"><span class="comment">// --------------------------------------------------</span></span><br><span class="line">$pagination-link-hover-border   = $winered</span><br><span class="line">$pagination-active-bg           = $winered</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Buttons</span></span><br><span class="line"><span class="comment">// --------------------------------------------------</span></span><br><span class="line">$btn-<span class="keyword">default</span>-radius             = <span class="number">0</span></span><br><span class="line">$btn-<span class="keyword">default</span>-bg                 = white</span><br><span class="line">$btn-<span class="keyword">default</span>-color              = $winered</span><br><span class="line">$btn-<span class="keyword">default</span>-border-width       = <span class="number">1</span>px</span><br><span class="line">$btn-<span class="keyword">default</span>-border-color       = $winered</span><br><span class="line">$btn-<span class="keyword">default</span>-hover-bg           = $winered</span><br><span class="line">$btn-<span class="keyword">default</span>-hover-color        = white</span><br><span class="line">$btn-<span class="keyword">default</span>-hover-border-color = $winered</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 文章内链接文本样式</span></span><br><span class="line">.post-body p a&#123;</span><br><span class="line">  color: #<span class="number">0593</span>d3;</span><br><span class="line">  border-bottom: none;</span><br><span class="line">  border-bottom: <span class="number">1</span>px solid #<span class="number">0593</span>d3;</span><br><span class="line">  &amp;:hover &#123;</span><br><span class="line">    color: #fc6423;</span><br><span class="line">    border-bottom: none;</span><br><span class="line">    border-bottom: <span class="number">1</span>px solid #fc6423;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 主页文章上下左右间距</span></span><br><span class="line">.post &#123;</span><br><span class="line"><span class="comment">// margin-top: 5px;</span></span><br><span class="line"><span class="comment">// margin-bottom: 3px;</span></span><br><span class="line">  padding: <span class="number">3</span>px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>10.修改**_config.yml**</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">涉及改动内容较多，在此不再赘述</span><br></pre></td></tr></table></figure><h1 id="Hexo常用命令"><a href="#Hexo常用命令" class="headerlink" title="Hexo常用命令"></a>Hexo常用命令</h1><blockquote><ol><li>清空工程，便于重新生成站点文件，改动涉及hexo框架内文件时使用<br>hexo clean</li></ol></blockquote><blockquote><ol start="2"><li>生成站点文件<br>hexo g</li></ol></blockquote><blockquote><ol start="3"><li>启动本地server，不更改port一般为<strong><a href="http://localhost:4000/">http://localhost:4000</a></strong><br>hexo s</li></ol></blockquote><blockquote><ol start="4"><li>生成站点文件，并部署到github<br>hexo g -d</li></ol></blockquote><h1 id="Ubuntu18-04部署、迁移Hexo"><a href="#Ubuntu18-04部署、迁移Hexo" class="headerlink" title="Ubuntu18.04部署、迁移Hexo"></a>Ubuntu18.04部署、迁移Hexo</h1><blockquote><p>第一步，安装 NodeJs<br><code>sudo apt install -y nodejs</code></p></blockquote><blockquote><p>第二步，安装 npm<br><code>sudo apt install -y npm</code><br>如果提示node版本过低，可以执行下面方法升级node<br><code>node -v</code>  #先查看本机node.js版本：<br><code>sudo npm install -g n</code>  #安装node管理器n<br><code>sudo n stable</code> # 升级最新稳定版本</p></blockquote><blockquote><p>第三步，安装hexo<br><code>npm install -g hexo-cli</code></p></blockquote><blockquote><p>第三步，安装hexo<br><code>npm install -g hexo-cli</code><br><strong>另：本地测试时，火狐浏览器会遇到证书问题</strong><br>preference -&gt; security -&gt; Block dangerous and deceptive content</p></blockquote><blockquote><p>第四步，迁移hexo，拷贝文件及文件夹<br>拷贝_config.yml，theme/，source/，scaffolds/，package.json，.gitignore<br>删除.git/，node_modules/，public/，.deploy_git/，db.json</p></blockquote><blockquote><p>第五步，hexo路径执行<br><code>npm install</code><br>迁移完成<br><strong>迁移博客切勿执行<code>hexo init</code>，配置文件_config.yml里面内容会被清空使用默认值</strong></p></blockquote><blockquote><p>等后续有空后研究下利用docker镜像管理hexo的部署迁移</p></blockquote><h1 id="解决图床问题"><a href="#解决图床问题" class="headerlink" title="解决图床问题"></a>解决图床问题</h1><p>next 主题，编辑主题目录下的 next/layout/_partials/head.swig 文件，在头部加入下面的 meta 标签<br><code>&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot; /&gt;</code></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Hexo-NexT主题定制化修改&quot;&gt;&lt;a href=&quot;#Hexo-NexT主题定制化修改&quot; class=&quot;headerlink&quot; title=&quot;Hexo NexT主题定制化修改&quot;&gt;&lt;/a&gt;Hexo NexT主题定制化修改&lt;/h1&gt;&lt;p&gt;折腾几天，总算是有了自己的Blog，也算是一个新的开始。&lt;br&gt;NexT主题的装修也零零散散花了些时间，期间也参考了不少其他博主的配置，总算&lt;br&gt;是部署成自己比较钟意的样式了。&lt;/p&gt;
    
    </summary>
    
      <category term="Blog" scheme="http://jxbuaa.github.io/categories/Blog/"/>
    
    
      <category term="Hexo" scheme="http://jxbuaa.github.io/tags/Hexo/"/>
    
      <category term="NexT" scheme="http://jxbuaa.github.io/tags/NexT/"/>
    
      <category term="Theme" scheme="http://jxbuaa.github.io/tags/Theme/"/>
    
  </entry>
  
</feed>
